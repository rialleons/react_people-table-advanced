{"version":3,"sources":["components/Navbar.tsx","App.tsx","api.ts","components/Loader/Loader.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/PeopleTable.tsx","pages/PeoplePage.tsx","utils/getVisiblePeople.ts","pages/HomePage.tsx","pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","isActive","classNames","Navbar","className","role","to","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","centuriesArray","PeopleFilters","setSearchParams","query","get","centuries","getAll","sex","type","placeholder","onChange","event","target","map","century","chosenCentury","includes","filter","length","PeopleTable","people","visiblePeople","sort","order","slug","useParams","setSortParams","field","findParent","parentName","parentSlug","find","parent","name","person","born","died","some","mother","motherName","father","fatherName","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","useEffect","getPeople","catch","finally","filters","lowerQuery","toLowerCase","trim","lowerName","lowerMotherName","lowerFatherName","Math","ceil","person1","person2","localeCompare","Error","reverse","getVisiblePeople","HomePage","replace","NotFoundPage","Root","path","element","index","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.5693cf95.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\nconst API_URL = (\n  'https://mate-academy.github.io/react_people-table/api/people.json'\n);\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nconst centuriesArray = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(\n      searchParams, { query: event.target.value || null },\n    );\n\n    setSearchParams(search);\n  };\n\n  const handleCenturyToggle = (chosenCentury: string) => {\n    return {\n      centuries: centuries.includes(chosenCentury)\n        ? centuries.filter(century => chosenCentury !== century)\n        : [...centuries, chosenCentury],\n    };\n  };\n\n  const resetSearchParams = () => {\n    return {\n      centuries: [],\n      sex: null,\n      query: null,\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({\n            'is-active': !sex,\n          })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'm',\n          })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({\n            'is-active': sex === 'f',\n          })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {centuriesArray.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={handleCenturyToggle(century)}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              params={{ centuries: [] }}\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length !== 0,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={resetSearchParams()}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport {\n  Link as PersonLink,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\ntype Props = {\n  people: Person[];\n  visiblePeople: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, visiblePeople }) => {\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const { slug } = useParams();\n\n  const setSortParams = (field: string): SearchParams => {\n    if (sort === field && order) {\n      return { sort: null, order: null };\n    }\n\n    if (sort === field) {\n      return { order: 'desc' };\n    }\n\n    return { sort: field, order: null };\n  };\n\n  const findParent = (parentName: string) => {\n    const parentSlug = people.find(parent => parent.name === parentName)?.slug;\n\n    return `/people/${parentSlug}?${searchParams.toString()}`;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"\n        table\n        is-striped\n        is-hoverable\n        is-narrow\n        is-fullwidth\n   \">\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={setSortParams('name')}>\n                <span className=\"icon\">\n                  <i\n                    className={classNames('fas', {\n                      'fa-sort': sort !== 'name',\n                      'fa-sort-up': sort === 'name' && !order,\n                      'fa-sort-down': sort === 'name' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={setSortParams('sex')}>\n                <span className=\"icon\">\n                  <i\n                    className={classNames('fas', {\n                      'fa-sort': sort !== 'sex',\n                      'fa-sort-up': sort === 'sex' && !order,\n                      'fa-sort-down': sort === 'sex' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={setSortParams('born')}>\n                <span className=\"icon\">\n                  <i\n                    className={classNames('fas', {\n                      'fa-sort': sort !== 'born',\n                      'fa-sort-up': sort === 'born' && !order,\n                      'fa-sort-down': sort === 'born' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={setSortParams('died')}>\n                <span className=\"icon\">\n                  <i\n                    className={classNames('fas', {\n                      'fa-sort': sort !== 'died',\n                      'fa-sort-up': sort === 'died' && !order,\n                      'fa-sort-down': sort === 'died' && order,\n                    })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visiblePeople.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': person.slug === slug,\n            })}\n          >\n            <td>\n              <PersonLink\n                to={`/people/${person.slug}?${searchParams.toString()}`}\n                className={classNames({\n                  'has-text-danger': person.sex === 'f',\n                })}\n              >\n                {person.name}\n              </PersonLink>\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n\n            <td>\n              {people\n                .some(mother => mother.name === person.motherName)\n                && person.motherName ? (\n                  <PersonLink\n                    to={findParent(person.motherName)}\n                    className=\"has-text-danger\"\n                  >\n                    {person.motherName}\n                  </PersonLink>\n                ) : (\n                  <p>\n                    {person.motherName || '-'}\n                  </p>\n                )}\n            </td>\n\n            <td>\n              {people\n                .some(father => father.name === person.fatherName)\n                && person.fatherName ? (\n                  <PersonLink\n                    to={findParent(person.fatherName)}\n                  >\n                    {person.fatherName}\n                  </PersonLink>\n                ) : (\n                  <p>\n                    {person.fatherName || '-'}\n                  </p>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\nimport { PeopleFilters } from '../components/PeopleFilters';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { getVisiblePeople } from '../utils/getVisiblePeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsLoadingError(false);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visiblePeople = getVisiblePeople(people, {\n    query, centuries, sex, sort, order,\n  });\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!!people.length && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isLoadingError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {!isLoading && !isLoadingError && (\n                <>\n                  {!people.length && (\n                    <p data-cy=\"noPeopleMessage\">\n                      There are no people on the server\n                    </p>\n                  )}\n\n                  {!!people.length && !visiblePeople.length && (\n                    <p>\n                      There are no people matching the current search criteria\n                    </p>\n                  )}\n                </>\n              )}\n\n              {!!visiblePeople.length && (\n                <PeopleTable\n                  people={people}\n                  visiblePeople={visiblePeople}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\nimport { Filters } from '../types/Filters';\n\nexport const getVisiblePeople = (\n  people: Person[],\n  filters: Filters,\n) => {\n  let visiblePeople = [...people];\n\n  const {\n    query,\n    centuries,\n    sex,\n    sort,\n    order,\n  } = filters;\n\n  if (query) {\n    const lowerQuery = query.toLowerCase().trim();\n\n    visiblePeople = people.filter(person => {\n      const lowerName = person.name.toLowerCase();\n      const lowerMotherName = person.motherName?.toLowerCase();\n      const lowerFatherName = person.fatherName?.toLowerCase();\n\n      const hasNameMatch = lowerName.includes(lowerQuery)\n        || lowerMotherName?.includes(lowerQuery)\n        || lowerFatherName?.includes(lowerQuery);\n\n      return hasNameMatch;\n    });\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(person => {\n      return centuries.includes(Math.ceil(person.born / 100).toString());\n    });\n  }\n\n  if (sort) {\n    switch (sort) {\n      case 'name':\n        visiblePeople.sort((person1, person2) => {\n          return person1.name.localeCompare(person2.name);\n        });\n        break;\n\n      case 'sex':\n        visiblePeople.sort((person1, person2) => {\n          return person1.sex.localeCompare(person2.sex);\n        });\n        break;\n\n      case 'born':\n        visiblePeople.sort((person1, person2) => {\n          return person1.born - person2.born;\n        });\n        break;\n\n      case 'died':\n        visiblePeople.sort((person1, person2) => {\n          return person1.died - person2.died;\n        });\n        break;\n\n      default:\n        throw new Error('Unknown sort parameter!');\n    }\n  }\n\n  if (order) {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","import { Navigate } from 'react-router-dom';\n\nexport const HomePage = () => (\n  <>\n    <Navigate to=\"/\" replace />\n    <h1 className=\"title\">Home Page</h1>\n  </>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { HashRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n        <Route path=\"/home\" element={<HomePage />} />\n\n        <Route path=\"/people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nconst container = document.getElementById('root') as HTMLElement;\n\ncreateRoot(container).render(<Root />);\n"],"sourceRoot":""}